#!/bin/bash

source /lib/gentoo/functions.sh

#
# Verify the EXPAND_USE name is valid, i.e. in the EXPANDS list.
# $1: the USE_EXPAND to verify
#
check_expand() {
    if [[ $(echo "${EXPANDS}" | grep "^${1}$") ==  "" ]]; then
        eerror "${1} is not a valid USE_EXPAND"
    fi
}

#
# Prepend the lowercased EXPAND_USE followed by an underscore to all flags when PREPEND_EXPAND=yes. Default to no when
# listing on a single line, and to yes when listing in column.
#
prepend_or_not() {
    # Default is to prepend for column output, otherwise no.
    if yesno ${IN_COLUMN}; then
        PREPEND_EXPAND=${PREPEND_EXPAND:-yes}
    else
        PREPEND_EXPAND=${PREPEND_EXPAND:-no}
    fi
    # Prepend the USE_EXPAND variable if desired, but not USE.
    if yesno ${PREPEND_EXPAND} && [[ ${1} != "USE" ]] && [[ ${1} != "" ]]; then
        echo -n "${2}" | sed "s/^\(-\?\)/\1${1,,}_/"
    else
        echo -n "${2}"
    fi
}

#
# Output a list all on the same line or one item per line depending on the sate of the IN_COLUMN variable.
# $1: the list to output
#
echo_list() {
    local list="${2}"
    # Remove minus signs everywhere if desired.
    if ! yesno ${KEEP_MINUS}; then
        list=$(echo "${list}" | sed 's/^-//')
    fi
    # Sort, remove duplicates and empty lines.
    list=$(echo "${list}" | sort -u | grep -v '^$')
    # And now output list either in column or on a line.
    if yesno ${IN_COLUMN}; then
        prepend_or_not "${1}" "${list}"
    else
        prepend_or_not "${1}" "${list}" | tr "\n" " "
    fi
    if [[ ${list} != "" ]]; then
        echo
    fi
}

#
# In the list of packages with their flags, only keep those packages having the EXPAND_USE variable being dealt with,
# and only keep the corresponding flags. All flags for other EXPAND_USE variables and packages without this particular
# EXPAND_USE variable are dropped.
# $1: the EXPAND_USE variable
#
filter_expands() {
    echo "${PACKAGES}" | sed -ne "/ ${1}/s/^\([^ ]*\).* ${1}=\"\([^\"]*\).*/\1 \2 /p" | \
            sed 's/::[A-Za-z0-9-]*//g;s/ [({][^)}]*[)}]//g;s/[*%]//g'
}

#
# Find all visible flags for a given EXPAND_USE variable.
# $1: the EXPAND_USE variable
#
all_flags() {
    echo "$(filter_expands ${1} | cut -d ' ' -f 2- | tr ' ' '\n')"
}

#
# Output all visible flags for a given EXPAND_USE variable.
# $1: the EXPAND_USE variable
#
list_all_flags() {
    echo_list ${1} "$(all_flags ${1})"
}

#
# Filter flags in the list of visible flags for a given EXPAND_USE variable.
# Dropped flags are those listed in:
#  - /etc/portage/make.conf
#  - /etc/portage/package.use
# $1: the EXPAND_USE variable
#
filter_flags() {
    local expand_prefix flag make_conf_flags conf_file packages package package_escaped
    # If needed, set the USE_EXPAND prefix and convert it to lowercase.
    if [[ ${1} != "USE" ]]; then
        expand_prefix="${1,,}_"
    fi
    # Get initial list of packages with only flags for the EXPAND_USE variable.
    FILTERED="$(filter_expands ${1})"
    # Get all globally declared flags from /etc/portage/make.conf.
    make_conf_flags=$(source /etc/portage/make.conf; echo "${!1} ")
    # Add flags from the corresponding ignore file in /etc/USEful
    if [[ -f /etc/USEful/${1} ]]; then
        while read line; do
            if [[ "${line:0:1}" != "#" ]]; then
                make_conf_flags+="${line} "
            fi
        done < /etc/USEful/${1}
    fi
    # If dealing with a USE_EXPAND variable, add expanded flags from the USE variable in /etc/portage/make.conf, i.e.,
    # those which appear in the USE variable prefixed with the lowercased name of the USE_EXPAND variable. Strip the
    # prefix.
    if [[ ${1} != "USE" ]]; then
        for flag in $(source /etc/portage/make.conf; echo "${USE}"); do
            if [[ ${flag#${expand_prefix}} != ${flag} ]]; then
                make_conf_flags+=" ${flag#${expand_prefix}}"
            fi
        done
    fi
    # Now that all declared flags are gathered, filter them, remove them from the list of flags displayed at the end.
    for flag in ${make_conf_flags}; do
        FILTERED=$(echo "${FILTERED}" | sed "s/ ${flag} / /")
    done
    # Filter flags from the pre-processed and cached /etc/portage/package.use and /etc/USEful/package.use
    while read line; do
        # In each line of the cache file, get the list of packages matching each DEPEND atom.
        packages=$(echo ${line} | sed 's/^[^ ]* \(.*\) |.*/\1/')
        if [[ ${packages} != '' ]]; then
            for package in ${packages}; do
                # Loop through each matching package. Slashes in the package name must be escaped for the final sed.
                package_escaped=${package//\//\\\/}
                for flag in $(echo ${line} | cut -d '|' -f 2); do
                    if [[ ${1} != "USE" ]]; then
                        # Does the package have this flag?
                        if [[ ${flag/${1,,}_/} != ${flag} ]]; then
                            # Yes, keep the flag but strip the prefix.
                            flag=${flag/${1,,}_/}
                        else
                            # No, remove the flag.
                            flag=""
                        fi
                    fi
                    # Delete the flag (or nothing if removed above) from the list of displayed flags for this particular
                    # package only.
                    FILTERED=$(echo "${FILTERED}" | sed "/^${package_escaped}[ :]/s/ ${flag} / /")
                done
            done
        fi
    done < /tmp/USEful-package-use-dependencies
    # Finally remove the package names from the final list of flags. They're no longer needed.
    echo "${FILTERED}" | cut -d " " -f 2- | tr " " "\n"
}

#
# Output all visible flags for a given EXPAND_USE variable, filtered with filter_flags().
# $1: the EXPAND_USE variable
#
list_flags() {
    echo_list ${1} "$(filter_flags ${1})"
}

#
# Only keep enabled flags. Use this with a pipe.
#
enabled() {
    grep -v "^-"
}

#
# Only keep disabled flags. Use this with a pipe.
#
disabled() {
    grep "^-"
}

#
# Output all enabled flags for a given EXPAND_USE, explicitely enabled by the user or not.
# $1: the EXPAND_USE variable
#
list_all_enabled() {
    echo_list ${1} "$(all_flags ${1} | enabled)"
}

#
# Output all disabled flags for a given EXPAND_USE, explicitely disabled by the user or not.
# $1: the EXPAND_USE variable
#
list_all_disabled() {
    echo_list ${1} "$(all_flags ${1} | disabled)"
}

#
# Output all flags for a given EXPAND_USE which are not explicitely enabled and could need to be looked at.
# $1: the EXPAND_USE variable
#
list_enabled() {
    echo_list ${1} "$(filter_flags ${1} | enabled)"
}

#
# Output all flags for a given EXPAND_USE which are not explicitely disabled and could need to be looked at.
# $1: the EXPAND_USE variable
#
list_disabled() {
    echo_list ${1} "$(filter_flags ${1} | disabled)"
}

#
# Find in which package(s) a specific flag appears in USE or an EXPAND_USE variable.
# $1: the flag
# $2: the EXPAND_USE variable
#
list_where() {
    local packages package package_escaped
    if yesno ${KEEP_MINUS}; then
        packages=$(filter_expands ${2:-USE} | sed -n "s/\([^ ]*\).* ${1} .*/\1/p")
    else
        packages=$(filter_expands ${2:-USE} | sed -n "s/\([^ ]*\).* [-]\?${1#-} .*/\1/p")
    fi
    for package in ${packages}; do
        package_escaped=${package//\//\\\/}
        echo "${PACKAGES}" | sed -n "s/^\(${package_escaped}.* ${2:-USE}=.*[\" ]\)\([-]\?${1#-}\)\([\" ].*\)/\1$(printf '\033[1;31m')\2$(printf '\033[0m')\3/p"
    done
}

#
# Execute an arbitrary function using an EXPAND_USE variable as its first parameter. The EXPAND_USE variable is first
# checked for validity and replaced by USE if empty. If "all" is passed instead of the name of an EXPAND_USE variable,
# then list flags for all variables, except when it would become messy.
# $1: the function to execute
# $2: the EXPAND_USE variable
#
execute() {
    local expand flag_list
    if [[ ${2} == "all" ]]; then
        if [[ ${1} == "filter_expands" ]]; then
            eerror "Listing all EXPAND_USE variables is not allowed for this command"
        else
            for expand in ${EXPANDS}; do
                flag_list="$(${1} ${expand})"
                if [[ ${flag_list} != "" ]]; then
                    if ! yesno ${IN_COLUMN}; then
                        echo -n "${expand}: "
                    fi
                    echo "${flag_list}"
                fi
            done
        fi
    else
        check_expand ${2:-USE}
        ${1} ${2:-USE}
    fi
}

#
# Figure out which package matches a given atom in package.use.
# $1: the DEPEND atom from the line
#
cache_package_use_line() {
    local package
    package=$(portageq best_visible / "${1}")
    if [[ ${package} != "" ]]; then
        echo -n " ${package}" >> /tmp/USEful-package-use-dependencies
    fi
}

#
# Cache dependencies of atoms in /etc/portage/package.use and /etc/USEful/package.use.
# $1: the package.use or similar file to process
# $2: the EXPAND_USE variable
#
cache_package_use() {
    local atom atom_escaped slots slot
    while read line; do
        # Only process non-empty lines not starting with a sharp sign.
        if [[ "${line}" != "" ]] && [[ "${line:0:1}" != "#" ]]; then
            atom=$(echo ${line} | cut -d ' ' -f 1) # FIXME use expansion
            echo -n ${atom} >> /tmp/USEful-package-use-dependencies
            if [[ ${atom/:/} != ${atom} ]]; then
                # If the atom is for a specific slot, then it's the easy case. We only need to look for packages
                # matching this particular slot.
                cache_package_use_line ${atom}
            else
                # If no slot is specified, then we need to look-up in the cached emerge output what slots are pulled
                # into @world.
                atom_escaped=$(echo ${atom} | sed 's/^[<>=]*//;s/\//\\\//g;s/_\(alpha\|beta\|pre\|rc\)[0-9]*//;s/-[0-9.]\+[a-z]\?//;s/-r[0-9]*$//')
                slots=$(sed -n "s/_\(alpha\|beta\|pre\|rc\)[0-9]*//g;s/-r[0-9]*\([: ]\)/\1/g;s/^\[ebuild[^]]*\] ${atom_escaped}-[0-9.]*:\([^ ]*\).*/\1/p" /tmp/USEful-emerge-output)
                if [[ ${slots} == "" ]]; then
                    # No slot came back. Process the line as a slot-less atom out of precaution.
                    # FIXME needed?
                    cache_package_use_line ${atom}
                else
                    for slot in ${slots}; do
                        # Process the line for each slot, one by one.
                        cache_package_use_line "${atom}:${slot}"
                    done
                fi
            fi
            # Build the cache entry like this:
            # atom [package1] [package2] ... | flags
            echo " |" $(echo ${line} | cut -d " " -f 2-) >> /tmp/USEful-package-use-dependencies
        fi
    done < ${1}
}

help() {
    cat <<EOF
USEful [options] command ...
Options:
    -1, -c, --column, --in-column
    -k, --keep, --keep-minus
    --[no-]prepend
    -q, quiet
    -r, --regen, --force-regen
Commands:
    ad, all-disabled ['EXPAND_USE variable']
    ae, all-enabled ['EXPAND_USE variable']
    af, all-flags ['EXPAND_USE variable']
    ap, all-packages
    d, disabled ['EXPAND_USE variable']
    e, enabled ['EXPAND_USE variable']
    x, expands
    f, flags ['EXPAND_USE variable']
    p, packages ['EXPAND_USE variable']
    w, where 'flag'
The default EXPAND_USE name is 'USE'.
Most commands will accept 'all' instead of an EXPAND_USE name.
For more information see the man page.
EOF
}


# Script starts here.

# Show help immediately if asked for it in order to avoid having to wait for caching.
if [[ ${1} == "" ]] || [[ ${1} == "h" ]] || [[ ${1} == "help" ]]; then
    help
    exit 0
fi

# Variable defaults. These can be passed from the environment.
EINFO_QUIET="${EINFO_QUIET:-no}"
FORCE_REGEN="${FORCE_REGEN:-no}"
IN_COLUMN="${IN_COLUMN:-no}"
KEEP_MINUS="${KEEP_MINUS:-no}"

# Process command line options.
while [[ ${1:0:1} == "-" ]]; do
    case ${1} in
        --quiet)
            EINFO_QUIET=yes;;
        --regen|--force-regen)
            FORCE_REGEN=yes;;
        --column|--in-column)
            IN_COLUMN=yes;;
        --keep|--keep-minus)
            KEEP_MINUS=yes;;
        --no-prepend)
            PREPEND_EXPAND=no;;
        --prepend)
            PREPEND_EXPAND=yes;;
        --*)
            eerror "Unknown long option: ${1}"
            exit 1;;
        -)
            eerror "Lone stray dash"
            exit 1;;
        -*)
            option_list=${1:1}
            while [[ ${#option_list} != "0" ]]; do
                case ${option_list:0:1} in
                    q)
                        EINFO_QUIET=yes;;
                    r)
                        FORCE_REGEN=yes;;
                    1|c)
                        IN_COLUMN=yes;;
                    k)
                        KEEP_MINUS=yes;;
                    *)
                        eerror "Unknown short option: -${option_list:0:1}"
                        exit 1;;
                esac
                option_list=${option_list:1}
            done
    esac
    shift
done

# Create cache if it does not exist yet, or if forced.
if yesno "${FORCE_REGEN}" || [[ ! -f /tmp/USEful-emerge-output ]]; then
    ebegin "Caching @world"
    emerge -vpe @world > /tmp/USEful-emerge-output 2>&1
    echo > /tmp/USEful-package-use-dependencies
    if [[ -f /etc/portage/package.use ]]; then
        cache_package_use "/etc/portage/package.use"
    elif [[ -d /etc/portage/package.use ]]; then
        for conf_file in /etc/portage/package.use/*; do
            cache_package_use ${conf_file}
        done
    fi
    if [[ -f /etc/USEful/package.use ]]; then
        cache_package_use "/etc/USEful/package.use"
    fi
    eend
fi
PACKAGES=$(sed -n '/^\[ebuild.*="/s/^\[[^]]*] \(.*\) [0-9,]* [A-Za-z]*/\1/p' /tmp/USEful-emerge-output)
EXPANDS=$(echo "${PACKAGES}" | sed -n 's/^[^=]* \([^=]*="\)/\1/;s/\([^=]*\)="[^"]*"/\1/g;s/ /\n/gp' | sort -u)

# Process commands
case ${1} in
    ad|all-disabled)
        execute list_all_disabled ${2};;
    ae|all-enabled)
        execute list_all_enabled ${2};;
    af|all-flags)
        execute list_all_flags ${2};;
    ap|all-packages)
        echo "${PACKAGES}";;
    d|disabled)
        execute list_disabled ${2};;
    e|enabled)
        execute list_enabled ${2};;
    x|expands)
        echo_list "" "${EXPANDS}";;
    f|flags)
        execute list_flags ${2};;
    p|packages)
        execute filter_expands ${2} | sed 's/ $//';;
    w|where)
        list_where ${2} ${3};;
    *)
        eerror "Unknown command: ${1}";;
esac
