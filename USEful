#!/bin/bash

# TODO:
# - do caching so speed up package.use procesing
# - add enable/disable/prune/sort with alphabetical sorting
# - add config files to manually filter out stuff
# - show help when no command, add help command
# - more exhaustive error checking
# - more code comments

source /lib/gentoo/functions.sh

#
# Verify the EXPAND_USE name is valid, i.e. in the EXPANDS list
# $1: the USE_EXPAND to verify
#
check_expand() {
    if [[ $(echo "${EXPANDS}" | grep "^${1}$") ==  "" ]]; then
        eerror "${1} is not a valid USE_EXPAND"
    fi
}

#
# Prepend the lowercased EXPAND_USE followed by an underscore to all flags when PREPEND_EXPAND=yes. Default to no when
# listing on a single line, and to yes when listing in column.
#
prepend_or_not() {
    if yesno ${IN_COLUMN}; then
        PREPEND_EXPAND=${PREPEND_EXPAND:-yes}
    else
        PREPEND_EXPAND=${PREPEND_EXPAND:-no}
    fi
    if yesno ${PREPEND_EXPAND} && [[ ${1} != "USE" ]] && [[ ${1} != "" ]]; then
        echo -n "${2}" | sed "s/^\(-\?\)/\1${1,,}_/"
    else
        echo -n "${2}"
    fi
}

#
# Output a list all on the same line or one item per line depending on the sate of the IN_COLUMN variable.
# $1: the list to output
#
echo_list() {
    local list="${2}"
    if ! yesno ${KEEP_MINUS}; then
        list=$(echo "${list}" | sed 's/^-//')
    fi
    list=$(echo "${list}" | sort -u | grep -v '^$')
    if yesno ${IN_COLUMN}; then
        prepend_or_not "${1}" "${list}"
    else
        prepend_or_not "${1}" "${list}" | tr "\n" " "
    fi
    if [[ ${list} != "" ]]; then
        echo
    fi
}

#
# In the list of packages with their flags, only keep those packages having the EXPAND_USE variable being dealt with,
# and only keep the corresponding flags. All flags for other EXPAND_USE variables and packages without this particular
# EXPAND_USE variable are dropped.
# ${1}: the EXPAND_USE variable
#
filter_expands() {
    echo "${PACKAGES}" | sed -ne "/ ${1}/s/^\([^ ]*\).* ${1}=\"\([^\"]*\).*/\1 \2 /p" |
            sed 's/::[A-Za-z0-9-]*//g;s/ [({][^)}]*[)}]//g;s/[*%]//g'
}

#
# Find all visible flags for a given EXPAND_USE variable.
# ${1}: the EXPAND_USE variable
#
all_flags() {
    echo "$(filter_expands ${1} | cut -d ' ' -f 2- | tr ' ' '\n')"
}

#
# Output all visible flags for a given EXPAND_USE variable.
# ${1}: the EXPAND_USE variable
#
list_all_flags() {
    echo_list ${1} "$(all_flags ${1})"
}

#
# ${1}: the line from package.use or similar
# ${2}: the package atom from the line
# ${3}: the EXPAND_USE variable
#
process_package_use_line() {
    local package package_escaped flag
    package=$(emerge -p --nodeps "${2}" 2>/dev/null | sed -n 's/^\[[^]]*\] \([^ :]*\).*/\1/p')
    package_escaped=${package/\//\\\/}
    for flag in $(echo ${1} | cut -d ' ' -f 2-); do
        if [[ ${3} != "USE" ]]; then
            if [[ ${flag#${3,,}_} != ${flag} ]]; then
                flag=${flag#${3,,}_}
            else
                flag=""
            fi
        fi
        FILTERED=$(echo "${FILTERED}" | sed "/^${package_escaped}[ :]/s/ ${flag} / /")
    done
}

#
#
# ${1}: the package.use or similar file to process
# ${2}: the EXPAND_USE variable
#
process_package_use() {
    local atom atom_escaped slots slot
    while read line; do
        if [[ "${line}" != "" ]] && [[ "${line:0:1}" != "#" ]]; then
            atom=$(echo ${line} | cut -d ' ' -f 1) # FIXME use expansion
            if [[ ${atom/:/} != ${atom} ]]; then
                process_package_use_line "${line}" ${atom} ${2}
            else
                atom_escaped=${atom/\//\\\/}
                slots=$(echo "${FILTERED}" | sed -n "s/^${atom_escaped}[^:]*:\([^ ]*\).*/\1/p")
                if [[ ${slots} == "" ]]; then
                    process_package_use_line "${line}" ${atom} ${2}
                else
                    for slot in ${slots}; do
                        process_package_use_line "${line}" "${atom}:${slot}" ${2}
                    done
                fi
            fi
        fi
    done < ${1}
}

#
# Filter flags in the list of visible flags for a given EXPAND_USE variable.
# Dropped flags are those listed in:
#  - /etc/portage/make.conf
#  - /etc/portage/package.use
#  - TODO: complete that list
# ${1}: the EXPAND_USE variable
#
filter_flags() {
    local expand_prefix flag make_conf_flags conf_file
    if [[ ${1} != "USE" ]]; then
        expand_prefix="${1,,}_"
    fi
    FILTERED="$(filter_expands ${1})"
    # Get all globally declared flags
    make_conf_flags=$(source /etc/portage/make.conf; echo "${!1}")
    # If dealing with a USE_EXPAND variable, add expanded flags from ${USE}, i.e., those which appear in the USE
    # variable prefixed with the lowercased name of the USE_EXPAND variable
    if [[ ${1} != "USE" ]]; then
        for flag in $(source /etc/portage/make.conf; echo "${USE}"); do
            if [[ ${flag#${expand_prefix}} != ${flag} ]]; then
                make_conf_flags+=" ${flag#${expand_prefix}}"
            fi
        done
    fi
    # Now that all declared flags are gathered, filter them
    for flag in ${make_conf_flags}; do
        FILTERED=$(echo "${FILTERED}" | sed "s/ ${flag} / /")
    done
    if [[ -f /etc/portage/package.use ]]; then
        process_package_use "/etc/portage/package.use" ${1}
    elif [[ -d /etc/portage/package.use ]]; then
        for conf_file in /etc/portage/package.use/*; do
            process_package_use ${conf_file} ${1}
        done
    fi
    echo "${FILTERED}" | cut -d " " -f 2- | tr " " "\n"
}

#
# Output all visible flags for a given EXPAND_USE variable, filtered with filter_flags().
# ${1}: the EXPAND_USE variable
#
list_flags() {
    echo_list ${1} "$(filter_flags ${1})"
}

#
# Only keep enabled flags. Use this with a pipe.
#
enabled() {
    grep -v "^-"
}

#
# Only keep disabled flags. Use this with a pipe.
#
disabled() {
    grep "^-"
}

#
# Output all enabled flags for a given EXPAND_USE, explicitely enabled by the user or not.
# ${1}: the EXPAND_USE variable
#
list_all_enabled() {
    echo_list ${1} "$(all_flags ${1} | enabled)"
}

#
# Output all disabled flags for a given EXPAND_USE, explicitely disabled by the user or not.
# ${1}: the EXPAND_USE variable
#
list_all_disabled() {
    echo_list ${1} "$(all_flags ${1} | disabled)"
}

#
# Output all flags for a given EXPAND_USE which are not explicitely enabled and could need to be looked at.
# ${1}: the EXPAND_USE variable
#
list_enabled() {
    echo_list ${1} "$(filter_flags ${1} | enabled)"
}

#
# Output all flags for a given EXPAND_USE which are not explicitely disabled and could need to be looked at.
# ${1}: the EXPAND_USE variable
#
list_disabled() {
    echo_list ${1} "$(filter_flags ${1} | disabled)"
}

#
# Execute an arbitrary function using an EXPAND_USE variable as its first parameter. The EXPAND_USE variable is first
# checked for validity and replaced by USE if empty. If "all" is passed instead of the name of an EXPAND_USE variable,
# then list flags for all variables, except whe nit would become messy.
# $1: the function to execute
# $2: the EXPAND_USE variable
#
execute() {
    local expand flag_list
    if [[ ${2} == "all" ]]; then
        if [[ ${1} == "filter_expands" ]]; then
            eerror "Listing all EXPAND_USE variables is not allowed for this command"
        else
            for expand in ${EXPANDS}; do
                flag_list="$(${1} ${expand})"
                if [[ ${flag_list} != "" ]]; then
                    if ! yesno ${IN_COLUMN}; then
                        echo -n "${expand}: "
                    fi
                    echo "${flag_list}"
                fi
            done
        fi
    else
        check_expand ${2:-USE}
        ${1} ${2:-USE}
    fi
}


EINFO_QUIET="${EINFO_QUIET:-no}"
FORCE_REGEN="${FORCE_REGEN:-no}"
IN_COLUMN="${IN_COLUMN:-no}"
KEEP_MINUS="${KEEP_MINUS:-no}"

while [[ ${1:0:1} == "-" ]]; do
    case ${1} in
        --quiet)
            EINFO_QUIET=yes;;
        --regen|--force-regen)
            FORCE_REGEN=yes;;
        --column|--in-column)
            IN_COLUMN=yes;;
        --keep|--keep-minus)
            KEEP_MINUS=yes;;
        --no-prepend)
            PREPEND_EXPAND=no;;
        --prepend)
            PREPEND_EXPAND=yes;;
        --*)
            eerror "Unknown long option: ${1}"
            exit 1;;
        -)
            eerror "Lone stray dash"
            exit 1;;
        -*)
            option_list=${1:1}
            while [[ ${#option_list} != "0" ]]; do
                case ${option_list:0:1} in
                    q)
                        EINFO_QUIET=yes;;
                    r)
                        FORCE_REGEN=yes;;
                    1|c)
                        IN_COLUMN=yes;;
                    k)
                        KEEP_MINUS=yes;;
                    *)
                        eerror "Unknown short option: -${option_list:0:1}"
                        exit 1;;
                esac
                option_list=${option_list:1}
            done
    esac
    shift
done

if yesno "${FORCE_REGEN}" || [[ ! -f /tmp/USEful-emerge-output ]]; then
    ebegin "Caching @world"
    emerge -vpe @world > /tmp/USEful-emerge-output 2>&1
    eend
fi
PACKAGES=$(sed -n '/^\[ebuild.*="/s/^\[[^]]*] \(.*\) [0-9,]* [A-Za-z]*/\1/p' /tmp/USEful-emerge-output)
EXPANDS=$(echo "${PACKAGES}" | sed -n 's/^[^=]* \([^=]*="\)/\1/;s/\([^=]*\)="[^"]*"/\1/g;s/ /\n/gp' | sort -u)

case ${1} in
    all-disabled)
        execute list_all_disabled ${2};;
    all-enabled)
        execute list_all_enabled ${2};;
    all-flags)
        execute list_all_flags ${2};;
    all-packages)
        echo "${PACKAGES}";;
    disabled)
        execute list_disabled ${2};;
    enabled)
        execute list_enabled ${2};;
    expands)
        echo_list "" "${EXPANDS}";;
    flags)
        execute list_flags ${2};;
    packages)
        execute filter_expands ${2} | sed 's/ $//';;
    where)
        echo "${PACKAGES}" | sed -ne "s/\(.*[\" ({]\)\([-]\?${2}\)\([\" )}%*].*\)/\1$(printf '\033[1;31m')\2$(printf '\033[0m')\3/p";;
    *)
        eerror "Unknown command: ${1}";;
esac
